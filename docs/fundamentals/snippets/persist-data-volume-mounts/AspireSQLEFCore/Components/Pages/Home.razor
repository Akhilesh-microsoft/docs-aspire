@page "/"
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@inject TicketContext context
@inject BlobServiceClient BlobClient

<div class="row">
    <div class="col-md-6">
        <div>
            <h1 class="display-4">Request Support</h1>
        </div>
        <EditForm Model="@Ticket" FormName="Tickets" method="post" enctype="multipart/form-data"
                                OnValidSubmit="@HandleValidSubmit" class="mb-4">
            <DataAnnotationsValidator />
            <div class="mb-4">
                <label>Issue Title</label>
                <InputText class="form-control" @bind-Value="@Ticket.Title" />
                <ValidationMessage For="() => Ticket.Title" />
            </div>
            <div class="mb-4">
                <label>Issue Description</label>
                <InputText class="form-control" @bind-Value="@Ticket.Description" />
                <ValidationMessage For="() => Ticket.Description" />
            </div>
            <div class="mb-4">
                <label>Attachment</label>
                <InputFile class="form-control" name="Ticket.Document" />
                <ValidationMessage For="() => Ticket.Document" />
            </div>
            <button class="btn btn-primary" type="submit">Submit</button>
            <button class="btn btn-danger mx-2" type="reset" @onclick=@ClearForm>Clear</button>
        </EditForm>

        <table class="table table-striped">
            @foreach (var ticket in Tickets)
            {
                <tr>
                    <td>@ticket.Id</td>
                    <td>@ticket.Title</td>
                    <td>@ticket.Description</td>
                </tr>
            }
        </table>


        <table class="table table-striped">
            @foreach (var attachment in Attachments)
            {
                <tr>
                    <td>@attachment.Name</td>
                    <td>@attachment.IsLatestVersion</td>
                </tr>
            }
        </table>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private SupportTicket Ticket { get; set; } = new();
    private List<SupportTicket> Tickets = [];
    private List<BlobItem> Attachments = [];

    private void ClearForm() => Ticket = new();

    protected override async Task OnInitializedAsync()
    {
        Tickets = await context.Tickets.ToListAsync();

        var docsContainer = BlobClient.GetBlobContainerClient("fileuploads");
        await foreach (BlobItem blobItem in docsContainer.GetBlobsAsync())
        {
            Attachments.Add(blobItem);
        }

    }

    private async Task HandleValidSubmit()
    {
        var docsContainer = BlobClient.GetBlobContainerClient("fileuploads");

        // Upload file to blob storage
        await docsContainer.UploadBlobAsync(
            Ticket.Document.FileName,
            Ticket.Document.OpenReadStream());

        context.Tickets.Add(Ticket);
        await context.SaveChangesAsync();
        Tickets = await context.Tickets.ToListAsync();
    }
}
